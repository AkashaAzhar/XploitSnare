import argparse
import json
import os
from datetime import datetime
from urllib.parse import urlparse
from colorama import Fore, Style, init
import pyfiglet  # pip install pyfiglet
from fpdf import FPDF

"""
OWASP Top 10 Vulnerability Scanner
Developed by Team Nexta
Project Lead: Akasha Azhar
"""

# Initialize colorama
init(autoreset=True)

# Import OWASP modules
import owasp.a01_broken_access_control as broken_access
import owasp.a02_cryptographic_failures as crypto_failures
import owasp.a03_injection as injection
import owasp.a04_insecure_design as insecure_design
import owasp.a05_security_misconfig as security_misconfig
import owasp.a06_vulnerable_components as vulnerable_components
import owasp.a07_auth_failures as auth_failures
import owasp.a08_software_integrity as software_integrity
import owasp.a09_logging_monitoring as logging_monitoring
import owasp.a10_ssrf as ssrf

# === Display banner ===
def show_banner():
    banner = pyfiglet.figlet_format("XploitSnare")
    print(Fore.GREEN + banner)
    print(Fore.CYAN + "üîç OWASP Top 10 Vulnerability Scanner\n" + Style.RESET_ALL)
    print(Fore.MAGENTA + "Developed by Team Nexta | Project Lead: Akasha Azhar\n" + Style.RESET_ALL)

# === Validate URL ===
def is_valid_url(url):
    try:
        result = urlparse(url)
        return result.scheme in ("http", "https") and result.netloc != ""
    except:
        return False

# === Extract domain ===
def extract_domain(url):
    return urlparse(url).netloc.replace("www.", "").replace(":", "_")

# === PDF Report Generator ===
def save_pdf_report(results, filename, target):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "OWASP Top 10 Vulnerability Scan Report", ln=1, align="C")
    pdf.set_font("Arial", "", 12)
    pdf.cell(0, 10, f"Target: {target}", ln=1)
    pdf.cell(0, 10, f"Generated by: Team Nexta | Project Lead: Akasha Azhar", ln=1)
    pdf.cell(0, 10, "", ln=1)  # Blank line

    for res in results:
        pdf.set_font("Arial", "B", 13)
        pdf.cell(0, 10, f"{res['module']} ({res['status']})", ln=1)
        pdf.set_font("Arial", "", 12)
        details = res['details']
        # Support both string, dict, and list details
        if isinstance(details, dict):
            for k, v in details.items():
                pdf.cell(0, 8, f"- {k}: {v}", ln=1)
        elif isinstance(details, list):
            for item in details:
                pdf.cell(0, 8, f"- {item}", ln=1)
        else:
            pdf.multi_cell(0, 8, f"{details}")
        pdf.cell(0, 7, "", ln=1)  # Spacer

    pdf.output(filename)

# === Main logic ===
def main():
    show_banner()

    parser = argparse.ArgumentParser(description="üîç OWASP Top 10 Vulnerability Scanner")

    parser.add_argument(
    "-t", "--target", required=True,
    help="üéØ Target URL or IP address (e.g. https://www.example.com)"
    )


    # Named vulnerability arguments
    parser.add_argument("--broken-access", action="store_true", help="A01: Broken Access Control")
    parser.add_argument("--crypto-failures", action="store_true", help="A02: Cryptographic Failures")
    parser.add_argument("--injection", action="store_true", help="A03: Injection (SQL, XSS, etc.)")
    parser.add_argument("--insecure-design", action="store_true", help="A04: Insecure Design")
    parser.add_argument("--security-misconfig", action="store_true", help="A05: Security Misconfiguration")
    parser.add_argument("--vulnerable-components", action="store_true", help="A06: Vulnerable & Outdated Components")
    parser.add_argument("--auth-failures", action="store_true", help="A07: Identification & Authentication Failures")
    parser.add_argument("--software-integrity", action="store_true", help="A08: Software & Data Integrity Failures")
    parser.add_argument("--logging-monitoring", action="store_true", help="A09: Security Logging & Monitoring Failures")
    parser.add_argument("--ssrf", action="store_true", help="A10: Server-Side Request Forgery (SSRF)")

    parser.add_argument("--all", action="store_true", help="Run all OWASP Top 10 checks")

    args = parser.parse_args()

    target = args.target

    if not is_valid_url(target):
        print(f"{Fore.RED}[-] Invalid target URL. Use http:// or https:// format.")
        return

    # Mapping flags to modules
    checks = {
        "broken-access": broken_access,
        "crypto-failures": crypto_failures,
        "injection": injection,
        "insecure-design": insecure_design,
        "security-misconfig": security_misconfig,
        "vulnerable-components": vulnerable_components,
        "auth-failures": auth_failures,
        "software-integrity": software_integrity,
        "logging-monitoring": logging_monitoring,
        "ssrf": ssrf,
    }

    results = []

    print(f"{Fore.CYAN}[~] Starting scan for {target}...\n")

    for flag, module in checks.items():
        if getattr(args, flag.replace("-", "_")) or args.all:
            print(f"{Fore.YELLOW}[+] Running {flag.replace('-', ' ').title()} check...{Style.RESET_ALL}")
            try:
                result = module.Scanner().run(target)
                results.append(result)
            except Exception as e:
                print(f"{Fore.RED}[!] Error in {flag} check: {e}")

    domain = extract_domain(target)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{domain}_{timestamp}_report.json"

    os.makedirs("reports", exist_ok=True)
    result_dicts = [r.to_dict() for r in results]

    # Save as JSON
    with open(os.path.join("reports", filename), "w") as f:
        json.dump(result_dicts, f, indent=2)

    # Save as PDF
    pdf_filename = filename.replace(".json", ".pdf")
    save_pdf_report(result_dicts, os.path.join("reports", pdf_filename), target)

    print(f"\n{Fore.GREEN}[‚úì] Scan complete. Reports saved to:")
    print(f"   reports/{filename} (JSON)")
    print(f"   reports/{pdf_filename} (PDF)")
    print(Fore.CYAN + "\nDeveloped by Team Nexta | Project Lead: Akasha Azhar\n" + Style.RESET_ALL)

if __name__ == "__main__":
    main()
